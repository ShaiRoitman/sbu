/**
* Smart Backup Utility
* HTTP Server for Smart Backup Utility
*
* OpenAPI spec version: 1.0.0
* Contact: Shai@Roitman.info
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "BackupDef.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

BackupDef::BackupDef()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Path = "";
    m_PathIsSet = false;
    m_Added = "";
    m_AddedIsSet = false;
    m_HostName = "";
    m_HostNameIsSet = false;
    
}

BackupDef::~BackupDef()
{
}

void BackupDef::validate()
{
    // TODO: implement validation
}

nlohmann::json BackupDef::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_AddedIsSet)
    {
        val["added"] = ModelBase::toJson(m_Added);
    }
    if(m_HostNameIsSet)
    {
        val["hostName"] = ModelBase::toJson(m_HostName);
    }
    

    return val;
}

void BackupDef::fromJson(nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
        
    }
    if(val.find("path") != val.end())
    {
        setPath(val.at("path"));
        
    }
    if(val.find("added") != val.end())
    {
        setAdded(val.at("added"));
        
    }
    if(val.find("hostName") != val.end())
    {
        setHostName(val.at("hostName"));
        
    }
    
}


int64_t BackupDef::getId() const
{
    return m_Id;
}
void BackupDef::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BackupDef::idIsSet() const
{
    return m_IdIsSet;
}
void BackupDef::unsetId()
{
    m_IdIsSet = false;
}
std::string BackupDef::getName() const
{
    return m_Name;
}
void BackupDef::setName(std::string value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BackupDef::nameIsSet() const
{
    return m_NameIsSet;
}
void BackupDef::unsetName()
{
    m_NameIsSet = false;
}
std::string BackupDef::getPath() const
{
    return m_Path;
}
void BackupDef::setPath(std::string value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool BackupDef::pathIsSet() const
{
    return m_PathIsSet;
}
void BackupDef::unsetPath()
{
    m_PathIsSet = false;
}
std::string BackupDef::getAdded() const
{
    return m_Added;
}
void BackupDef::setAdded(std::string value)
{
    m_Added = value;
    m_AddedIsSet = true;
}
bool BackupDef::addedIsSet() const
{
    return m_AddedIsSet;
}
void BackupDef::unsetAdded()
{
    m_AddedIsSet = false;
}
std::string BackupDef::getHostName() const
{
    return m_HostName;
}
void BackupDef::setHostName(std::string value)
{
    m_HostName = value;
    m_HostNameIsSet = true;
}
bool BackupDef::hostNameIsSet() const
{
    return m_HostNameIsSet;
}
void BackupDef::unsetHostName()
{
    m_HostNameIsSet = false;
}

}
}
}
}

