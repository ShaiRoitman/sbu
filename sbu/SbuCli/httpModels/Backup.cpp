/**
* Smart Backup Utility
* HTTP Server for Smart Backup Utility
*
* OpenAPI spec version: 1.0.0
* Contact: Shai@Roitman.info
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "Backup.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

Backup::Backup()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_BackupDefId = 0L;
    m_BackupDefIdIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Started = "";
    m_StartedIsSet = false;
    m_LastStatusUpdate = "";
    m_LastStatusUpdateIsSet = false;
    
}

Backup::~Backup()
{
}

void Backup::validate()
{
    // TODO: implement validation
}

nlohmann::json Backup::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_BackupDefIdIsSet)
    {
        val["backupDefId"] = m_BackupDefId;
    }
    if(m_StatusIsSet)
    {
        val["status"] = ModelBase::toJson(m_Status);
    }
    if(m_StartedIsSet)
    {
        val["started"] = ModelBase::toJson(m_Started);
    }
    if(m_LastStatusUpdateIsSet)
    {
        val["lastStatusUpdate"] = ModelBase::toJson(m_LastStatusUpdate);
    }
    

    return val;
}

void Backup::fromJson(nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("backupDefId") != val.end())
    {
        setBackupDefId(val.at("backupDefId"));
    }
    if(val.find("status") != val.end())
    {
        setStatus(val.at("status"));
        
    }
    if(val.find("started") != val.end())
    {
        setStarted(val.at("started"));
        
    }
    if(val.find("lastStatusUpdate") != val.end())
    {
        setLastStatusUpdate(val.at("lastStatusUpdate"));
        
    }
    
}


int64_t Backup::getId() const
{
    return m_Id;
}
void Backup::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Backup::idIsSet() const
{
    return m_IdIsSet;
}
void Backup::unsetId()
{
    m_IdIsSet = false;
}
int64_t Backup::getBackupDefId() const
{
    return m_BackupDefId;
}
void Backup::setBackupDefId(int64_t value)
{
    m_BackupDefId = value;
    m_BackupDefIdIsSet = true;
}
bool Backup::backupDefIdIsSet() const
{
    return m_BackupDefIdIsSet;
}
void Backup::unsetBackupDefId()
{
    m_BackupDefIdIsSet = false;
}
std::string Backup::getStatus() const
{
    return m_Status;
}
void Backup::setStatus(std::string value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Backup::statusIsSet() const
{
    return m_StatusIsSet;
}
void Backup::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string Backup::getStarted() const
{
    return m_Started;
}
void Backup::setStarted(std::string value)
{
    m_Started = value;
    m_StartedIsSet = true;
}
bool Backup::startedIsSet() const
{
    return m_StartedIsSet;
}
void Backup::unsetStarted()
{
    m_StartedIsSet = false;
}
std::string Backup::getLastStatusUpdate() const
{
    return m_LastStatusUpdate;
}
void Backup::setLastStatusUpdate(std::string value)
{
    m_LastStatusUpdate = value;
    m_LastStatusUpdateIsSet = true;
}
bool Backup::lastStatusUpdateIsSet() const
{
    return m_LastStatusUpdateIsSet;
}
void Backup::unsetLastStatusUpdate()
{
    m_LastStatusUpdateIsSet = false;
}

}
}
}
}

