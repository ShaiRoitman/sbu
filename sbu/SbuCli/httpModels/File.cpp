/**
* Smart Backup Utility
* HTTP Server for Smart Backup Utility
*
* OpenAPI spec version: 1.0.0
* Contact: Shai@Roitman.info
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "File.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

File::File()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Path = "";
    m_PathIsSet = false;
    m_Size = 0L;
    m_SizeIsSet = false;
    m_Created = "";
    m_CreatedIsSet = false;
    m_Modified = "";
    m_ModifiedIsSet = false;
    m_Accessed = "";
    m_AccessedIsSet = false;
    m_DigestType = "";
    m_DigestTypeIsSet = false;
    m_DigestValue = "";
    m_DigestValueIsSet = false;
    m_FileHandle = "";
    m_FileHandleIsSet = false;
    
}

File::~File()
{
}

void File::validate()
{
    // TODO: implement validation
}

nlohmann::json File::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_StatusIsSet)
    {
        val["status"] = ModelBase::toJson(m_Status);
    }
    if(m_TypeIsSet)
    {
        val["type"] = ModelBase::toJson(m_Type);
    }
    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_SizeIsSet)
    {
        val["size"] = m_Size;
    }
    if(m_CreatedIsSet)
    {
        val["created"] = ModelBase::toJson(m_Created);
    }
    if(m_ModifiedIsSet)
    {
        val["modified"] = ModelBase::toJson(m_Modified);
    }
    if(m_AccessedIsSet)
    {
        val["accessed"] = ModelBase::toJson(m_Accessed);
    }
    if(m_DigestTypeIsSet)
    {
        val["digestType"] = ModelBase::toJson(m_DigestType);
    }
    if(m_DigestValueIsSet)
    {
        val["digestValue"] = ModelBase::toJson(m_DigestValue);
    }
    if(m_FileHandleIsSet)
    {
        val["fileHandle"] = ModelBase::toJson(m_FileHandle);
    }
    

    return val;
}

void File::fromJson(nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("status") != val.end())
    {
        setStatus(val.at("status"));
        
    }
    if(val.find("type") != val.end())
    {
        setType(val.at("type"));
        
    }
    if(val.find("path") != val.end())
    {
        setPath(val.at("path"));
        
    }
    if(val.find("size") != val.end())
    {
        setSize(val.at("size"));
    }
    if(val.find("created") != val.end())
    {
        setCreated(val.at("created"));
        
    }
    if(val.find("modified") != val.end())
    {
        setModified(val.at("modified"));
        
    }
    if(val.find("accessed") != val.end())
    {
        setAccessed(val.at("accessed"));
        
    }
    if(val.find("digestType") != val.end())
    {
        setDigestType(val.at("digestType"));
        
    }
    if(val.find("digestValue") != val.end())
    {
        setDigestValue(val.at("digestValue"));
        
    }
    if(val.find("fileHandle") != val.end())
    {
        setFileHandle(val.at("fileHandle"));
        
    }
    
}


int64_t File::getId() const
{
    return m_Id;
}
void File::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool File::idIsSet() const
{
    return m_IdIsSet;
}
void File::unsetId()
{
    m_IdIsSet = false;
}
std::string File::getStatus() const
{
    return m_Status;
}
void File::setStatus(std::string value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool File::statusIsSet() const
{
    return m_StatusIsSet;
}
void File::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string File::getType() const
{
    return m_Type;
}
void File::setType(std::string value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool File::typeIsSet() const
{
    return m_TypeIsSet;
}
void File::unsetType()
{
    m_TypeIsSet = false;
}
std::string File::getPath() const
{
    return m_Path;
}
void File::setPath(std::string value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool File::pathIsSet() const
{
    return m_PathIsSet;
}
void File::unsetPath()
{
    m_PathIsSet = false;
}
int64_t File::getSize() const
{
    return m_Size;
}
void File::setSize(int64_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool File::sizeIsSet() const
{
    return m_SizeIsSet;
}
void File::unsetSize()
{
    m_SizeIsSet = false;
}
std::string File::getCreated() const
{
    return m_Created;
}
void File::setCreated(std::string value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool File::createdIsSet() const
{
    return m_CreatedIsSet;
}
void File::unsetCreated()
{
    m_CreatedIsSet = false;
}
std::string File::getModified() const
{
    return m_Modified;
}
void File::setModified(std::string value)
{
    m_Modified = value;
    m_ModifiedIsSet = true;
}
bool File::modifiedIsSet() const
{
    return m_ModifiedIsSet;
}
void File::unsetModified()
{
    m_ModifiedIsSet = false;
}
std::string File::getAccessed() const
{
    return m_Accessed;
}
void File::setAccessed(std::string value)
{
    m_Accessed = value;
    m_AccessedIsSet = true;
}
bool File::accessedIsSet() const
{
    return m_AccessedIsSet;
}
void File::unsetAccessed()
{
    m_AccessedIsSet = false;
}
std::string File::getDigestType() const
{
    return m_DigestType;
}
void File::setDigestType(std::string value)
{
    m_DigestType = value;
    m_DigestTypeIsSet = true;
}
bool File::digestTypeIsSet() const
{
    return m_DigestTypeIsSet;
}
void File::unsetDigestType()
{
    m_DigestTypeIsSet = false;
}
std::string File::getDigestValue() const
{
    return m_DigestValue;
}
void File::setDigestValue(std::string value)
{
    m_DigestValue = value;
    m_DigestValueIsSet = true;
}
bool File::digestValueIsSet() const
{
    return m_DigestValueIsSet;
}
void File::unsetDigestValue()
{
    m_DigestValueIsSet = false;
}
std::string File::getFileHandle() const
{
    return m_FileHandle;
}
void File::setFileHandle(std::string value)
{
    m_FileHandle = value;
    m_FileHandleIsSet = true;
}
bool File::fileHandleIsSet() const
{
    return m_FileHandleIsSet;
}
void File::unsetFileHandle()
{
    m_FileHandleIsSet = false;
}

}
}
}
}

