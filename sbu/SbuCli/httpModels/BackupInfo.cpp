/**
* Smart Backup Utility
* HTTP Server for Smart Backup Utility
*
* OpenAPI spec version: 1.0.0
* Contact: Shai@Roitman.info
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "BackupInfo.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

BackupInfo::BackupInfo()
{
    m_InfoIsSet = false;
    m_FilesIsSet = false;
    
}

BackupInfo::~BackupInfo()
{
}

void BackupInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json BackupInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_InfoIsSet)
    {
        val["info"] = ModelBase::toJson(m_Info);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Files )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["files"] = jsonArray;
        }
    }
    

    return val;
}

void BackupInfo::fromJson(nlohmann::json& val)
{
    if(val.find("info") != val.end())
    {
        if(!val["info"].is_null())
        {
            std::shared_ptr<FullBackupDefInfo> newItem(new FullBackupDefInfo());
            newItem->fromJson(val["info"]);
            setInfo( newItem );
        }
        
    }
    {
        m_Files.clear();
        nlohmann::json jsonArray;
        if(val.find("files") != val.end())
        {
        for( auto& item : val["files"] )
        {
            
            if(item.is_null())
            {
                m_Files.push_back( std::shared_ptr<File>(nullptr) );
            }
            else
            {
                std::shared_ptr<File> newItem(new File());
                newItem->fromJson(item);
                m_Files.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::shared_ptr<FullBackupDefInfo> BackupInfo::getInfo() const
{
    return m_Info;
}
void BackupInfo::setInfo(std::shared_ptr<FullBackupDefInfo> value)
{
    m_Info = value;
    m_InfoIsSet = true;
}
bool BackupInfo::infoIsSet() const
{
    return m_InfoIsSet;
}
void BackupInfo::unsetInfo()
{
    m_InfoIsSet = false;
}
std::vector<std::shared_ptr<File>>& BackupInfo::getFiles()
{
    return m_Files;
}
bool BackupInfo::filesIsSet() const
{
    return m_FilesIsSet;
}
void BackupInfo::unsetFiles()
{
    m_FilesIsSet = false;
}

}
}
}
}

