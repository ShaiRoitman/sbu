/**
* Smart Backup Utility
* HTTP Server for Smart Backup Utility
*
* OpenAPI spec version: 1.0.0
* Contact: Shai@Roitman.info
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "FullBackupDefInfo.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

FullBackupDefInfo::FullBackupDefInfo()
{
    m_DefIsSet = false;
    m_BackupsIsSet = false;
    
}

FullBackupDefInfo::~FullBackupDefInfo()
{
}

void FullBackupDefInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json FullBackupDefInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DefIsSet)
    {
        val["def"] = ModelBase::toJson(m_Def);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Backups )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["backups"] = jsonArray;
        }
    }
    

    return val;
}

void FullBackupDefInfo::fromJson(nlohmann::json& val)
{
    if(val.find("def") != val.end())
    {
        if(!val["def"].is_null())
        {
            std::shared_ptr<BackupDef> newItem(new BackupDef());
            newItem->fromJson(val["def"]);
            setDef( newItem );
        }
        
    }
    {
        m_Backups.clear();
        nlohmann::json jsonArray;
        if(val.find("backups") != val.end())
        {
        for( auto& item : val["backups"] )
        {
            
            if(item.is_null())
            {
                m_Backups.push_back( std::shared_ptr<Backup>(nullptr) );
            }
            else
            {
                std::shared_ptr<Backup> newItem(new Backup());
                newItem->fromJson(item);
                m_Backups.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::shared_ptr<BackupDef> FullBackupDefInfo::getDef() const
{
    return m_Def;
}
void FullBackupDefInfo::setDef(std::shared_ptr<BackupDef> value)
{
    m_Def = value;
    m_DefIsSet = true;
}
bool FullBackupDefInfo::defIsSet() const
{
    return m_DefIsSet;
}
void FullBackupDefInfo::unsetDef()
{
    m_DefIsSet = false;
}
std::vector<std::shared_ptr<Backup>>& FullBackupDefInfo::getBackups()
{
    return m_Backups;
}
bool FullBackupDefInfo::backupsIsSet() const
{
    return m_BackupsIsSet;
}
void FullBackupDefInfo::unsetBackups()
{
    m_BackupsIsSet = false;
}

}
}
}
}

