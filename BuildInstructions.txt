Build Instructions
------------------
SQL Formatter
https://sqlformat.org

Windows
-------
vcpkg
-----
git clone https://github.com/Microsoft/vcpkg.git
.\bootstrap-vcpkg.bat
.\vcpkg integrate install

vcpkg install nlohmann-json:x64-windows
vcpkg install sqlite3:x64-windows
vcpkg install sqlitecpp:x64-windows
vcpkg install openssl:x64-windows
vcpkg install poco:x64-windows
vcpkg install boost:x64-windows
vcpkg install aws-sdk-cpp:x64-windows
vcpkg install aws-sdk-cpp[transfer]:x64-windows

vcpkg install sqlite3:x64-windows-static
vcpkg install sqlitecpp:x64-windows-static
vcpkg install openssl:x64-windows-static
vcpkg install boost-filesystem:x64-windows-static
vcpkg install boost-program-options:x64-windows-static
vcpkg install boost:x64-windows-static

Build CompileToCppVariable https://github.com/ShaiRoitman/CompileToCppVar
ResourceCompile.cmd
WindowsBuild.cmd

Dependencies
------------
bootstrap
b2 --build-type=complete address-model=64

Boost				https://github.com/boostorg/boost
AWS SDK				https://github.com/aws/aws-sdk-cpp.git
SQlite C++ Wrapper 		https://github.com/SRombauts/SQLiteCpp
OpenSSL                    	https://github.com/openssl/openssl
SQlite   			https://github.com/smparkes/sqlite
Poco

Clean
-----
git clean -fxd
git status | grep modi | clu -a 2 | clu --format "git add %%1" | clu --system



sudo apt-get install libcurl4-openssl-dev

Boost
-----
wget https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.bz2
tar xvjf boost_1_70_0.tar.bz2
./bootstrap.sh
./b2

OpenSSL
-------
git clone https://github.com/openssl/openssl
cd openssl
./config
make -j 4

Poco
----
git clone -b master https://github.com/pocoproject/poco.git
mkdir rel
cd rel
cmake ..
make -j 4


AWS SDK
-------
export OPENSSL_ROOT_DIR=~/3rdParty/openssl
git clone https://github.com/aws/aws-sdk-cpp.git
cd aws-sdk-cpp
mkdir release
cd release
cmake -DBUILD_ONLY="s3;core;transfer" ..
make -j 4

SQLiteCPP
---------
git clone https://github.com/SRombauts/SQLiteCpp
cd SQLiteCpp
mkdir release
cd release
cmake ..
make -j 4

Sqlite3
-------
git clone https://github.com/alex85k/sqlite3-cmake.git 
cd sqlite3-cmake
CMakeLists.txt -> 
add_definitions(-DSQLITE_ENABLE_COLUMN_METADATA)
cmake .
sudo make install

httpModels
----------
Generate swagger CodeGen pistache insert into httpModels
copy pistache-server-server-generated.zip\pistache-server-server\model to httpModels
Create Object.h file
fix Modelbase.h to #include "nlohmann/json.hpp"

cmake -DCMAKE_PREFIX_PATH=/home/master/sbu/sbu/cmake/linux .

docker build -t sbu_compile compile_sbu
docker run -it -v ~/src/sbu:/sbu sbu_compile /sbu/linuxBuild/compile.sh


docker run -it -v $PWD:/sbu sbu_compile
cd sbu
in /usr/local/lib/cmake/SQLiteCpp/SQLiteCppConfig.cmake comment Sqlite find (2nd row)
./LinuxBuild.sh
mkdir sbu_app
ldd SbuCli/sbu | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' sbu_app/
cp SbuCli/sbu sbu_app
cd sbu_app
strip *

cp -r sbu/sbu_app docker_sbu

docker build -t sbu_run docker_sbu
docker build -t sbu_run -f docker_sbu/Dockerfile .
docker build -t web_sbu -f webservice_sbu/Dockerfile .


Dockers
-------
compile_sbu - Used for compiling the sbu code
web_sbu - Creating the SBUWebApp environment
sbu_run - Complete Application of the SBUWebApp and sbu
